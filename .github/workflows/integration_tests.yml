name: Integration Tests

on:
  push:
    branches: [ main ]

jobs:

  android_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_dir: [tests/test_integro/page_object/test_page_object.py, tests/test_integro/shadowstep_base/test_shadowstep_base.py, tests/test_integro/test_element/test_element_actions.py, tests/test_integro/test_element/test_element_coordinates.py, tests/test_integro/test_element/test_element_dom.py, tests/test_integro/test_element/test_element_gestures.py, tests/test_integro/test_element/test_element_properties.py, tests/test_integro/test_element/test_element_should.py, tests/test_integro/test_element/test_element_waiting.py, tests/test_integro/test_element/test_elements.py, tests/test_integro/test_element/test_screenshots.py, tests/test_integro/test_image/test_image.py, tests/test_integro/test_logcat/test_logcat.py, tests/test_integro/test_shadowstep/test_shadowstep.py, tests/test_integro/test_terminal/test_adb.py]

    env:
      CI: true
      API_LEVEL: 34
      ARCH: x86_64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install uv
        run: pip install uv

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Appium
        run: |
          npm install -g appium@latest
          appium driver install uiautomator2

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.API_LEVEL }}-${{ env.ARCH }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          arch: ${{ env.ARCH }}
          target: google_apis
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run Android tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          arch: ${{ env.ARCH }}
          target: google_apis
          profile: Nexus 6
          disable-spellchecker: true
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: |
            # Debug info
            echo "=== Environment Info ==="
            echo "Android SDK: $ANDROID_SDK_ROOT"
            adb devices
            echo "========================"
            
            echo "Waiting for Android emulator to fully boot..."
            adb wait-for-device
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
            echo "✅ Emulator boot completed"
                        
            # Install dependencies first
            uv sync --dev
                        
            # Test basic imports
            echo "Testing basic imports..."
            uv run python -c "import shadowstep; print('✅ Shadowstep imports successfully')"
            
            # Start Appium server
            echo "Starting Appium server..."
            appium server -p 4723 -a 0.0.0.0 -pa /wd/hub --relaxed-security > appium.log 2>&1 &
            APPIUM_PID=$!
            
            # Wait a bit for server to start
            sleep 10
            
            # Check if server is running
            if curl -s http://127.0.0.1:4723/wd/hub/status > /dev/null; then echo "✅ Appium server is running"; else echo "❌ Appium server failed to start"; cat appium.log; fi
            
            # Run tests if Appium server is working
            echo "Running tests for ${{ matrix.test_dir }}..."
            PYTHONPATH=$PWD uv run pytest ${{ matrix.test_dir }} -svl --log-cli-level INFO --tb=short --setup-show --reruns 2
            
            # Kill Appium server
            kill $APPIUM_PID || true
            
            echo "✅ Android environment test completed"
