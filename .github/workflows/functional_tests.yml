name: Shadowstep Functional Tests

on:
  # Manual trigger for functional tests
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'element'
        type: choice
        options:
        - element
        - page_object
        - terminal
        - navigator
        - locator
        - image
        - all
  # Run on develop branch push (not main to avoid conflicts)
  push:
    branches: [ develop ]
    paths: 
      - 'tests/**'
      - 'shadowstep/**'
  # Scheduled run (nightly)
  schedule:
    - cron: '0 2 * * *'

concurrency:
  group: functional-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android_functional_tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_target:
          - name: element_tests
            path: tests/element/
            description: "Element interaction tests"
          - name: page_object_tests  
            path: tests/page_object/
            description: "Page Object generation tests"
          - name: terminal_tests
            path: tests/terminal/
            description: "ADB and terminal tests"
          - name: navigator_tests
            path: tests/navigator/
            description: "Navigation tests"
          - name: locator_tests
            path: tests/locator/
            description: "Locator and selector tests"

    # Run all matrix jobs for push/schedule, or filter based on manual input
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      github.event.inputs.test_suite == 'all' ||
      github.event.inputs.test_suite == ''

    env:
      # Based on your conftest.py configuration
      API_LEVEL: 29
      ARCH: x86_64
      TARGET: google_apis
      UDID: "127.0.0.1:6555"
      APPIUM_IP: "127.0.0.1"
      APPIUM_PORT: 4723

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'

    # Install Appium server and drivers (based on your tests/README.md)
    - name: Install Appium
      run: |
        npm install -g appium@latest
        appium driver install uiautomator2
        appium plugin install execute-driver

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-shadowstep-${{ env.API_LEVEL }}-${{ env.ARCH }}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.API_LEVEL }}
        arch: ${{ env.ARCH }}
        target: ${{ env.TARGET }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Run Functional Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.API_LEVEL }}
        arch: ${{ env.ARCH }}
        target: ${{ env.TARGET }}
        # Use Google Pixel profile (similar to your setup)
        profile: Nexus 6
        disable-spellchecker: true
        disable-animations: true
        script: |
          # Start Appium server (matching your conftest.py setup)
          nohup appium server -p ${{ env.APPIUM_PORT }} -a 0.0.0.0 -pa /wd/hub --relaxed-security --log-level debug > appium.log 2>&1 &
          
          # Wait for Appium to be ready
          timeout 60 bash -c 'until curl -f http://${{ env.APPIUM_IP }}:${{ env.APPIUM_PORT }}/status; do sleep 2; done'
          
          # Install test APK (notepad.apk from your _apk folder)
          if [ -f "tests/_apk/notepad.apk" ]; then
            adb install tests/_apk/notepad.apk
          fi
          
          # Install dependencies
          uv sync --dev
          
          # Check if we should run this specific test suite
          SUITE_INPUT="${{ github.event.inputs.test_suite }}"
          TEST_NAME="${{ matrix.test_target.name }}"
          
          # Skip if manual dispatch and specific suite doesn't match
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && \
             [[ "$SUITE_INPUT" != "all" ]] && [[ "$SUITE_INPUT" != "" ]] && \
             [[ "$TEST_NAME" != *"$SUITE_INPUT"* ]]; then
            echo "Skipping $TEST_NAME (requested: $SUITE_INPUT)"
            exit 0
          fi
          
          # Run specific test suite
          uv run pytest ${{ matrix.test_target.path }} \
            -svl \
            --log-cli-level INFO \
            --tb=short \
            --setup-show \
            --junitxml=junit/functional-${{ matrix.test_target.name }}-results.xml \
            --cov=shadowstep \
            --cov-report=xml \
            --cov-report=html \
            --maxfail=5

      env:
        # Environment variables for tests (matching your conftest.py)
        ANDROID_SDK_VERSION: ${{ env.API_LEVEL }}
        CI: true
        APPIUM_SERVER_URL: http://${{ env.APPIUM_IP }}:${{ env.APPIUM_PORT }}/wd/hub

    - name: Save Appium logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: appium-logs-${{ matrix.test_target.name }}
        path: appium.log

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test_target.name }}
        path: junit/functional-${{ matrix.test_target.name }}-results.xml

    - name: Upload Coverage Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test_target.name }}
        path: |
          coverage.xml
          htmlcov/

    - name: Upload Screenshots (if any)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ matrix.test_target.name }}
        path: |
          tests/_test_data/
          pages/
        if-no-files-found: ignore

  # Unit tests that don't require Android emulator
  unit_tests:
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_suite == 'all' ||
      github.event_name == 'push' ||
      github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync --dev

    # Run unit tests that don't require Android (decorators, base classes, etc.)
    - name: Run Unit Tests
      run: |
        uv run pytest tests/decorators/ \
          -svl \
          --log-cli-level INFO \
          --tb=short \
          --junitxml=junit/unit-test-results.xml \
          --cov=shadowstep \
          --cov-report=xml

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: junit/unit-test-results.xml

  # Test report generation
  test_report:
    if: always()
    needs: [android_functional_tests, unit_tests]
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate Test Report
      run: |
        echo "# Shadowstep Functional Test Results" > test_report.md
        echo "" >> test_report.md
        echo "## Test Run Summary" >> test_report.md
        echo "- **Workflow**: ${{ github.workflow }}" >> test_report.md
        echo "- **Trigger**: ${{ github.event_name }}" >> test_report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> test_report.md
        echo "- **Commit**: ${{ github.sha }}" >> test_report.md
        echo "" >> test_report.md
        
        # Count test result files
        total_files=$(find . -name "*results.xml" | wc -l)
        echo "- **Total test result files**: $total_files" >> test_report.md
        
        # List test suites
        echo "" >> test_report.md
        echo "## Test Suites Executed" >> test_report.md
        find . -name "*results.xml" | sort | while read file; do
          suite_name=$(basename "$file" | sed 's/-results.xml//')
          echo "- $suite_name" >> test_report.md
        done
        
        # List all artifacts
        echo "" >> test_report.md
        echo "## Generated Artifacts" >> test_report.md
        find . -type f \( -name "*.xml" -o -name "*.log" -o -name "*.png" \) | sort >> test_report.md

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: shadowstep-test-report
        path: test_report.md
